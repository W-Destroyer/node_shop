{"version":3,"sources":["node_modules/add-dom-event-listener/lib/index.js"],"names":["Object","defineProperty","exports","value","addEventListener","_EventObject","require","_EventObject2","_interopRequireDefault","obj","__esModule","target","eventType","callback","wrapCallback","e","ne","call","remove","removeEventListener","attachEvent","detachEvent","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQ,SAAR,IAAqBE,gBAArB;;AAEA,IAAIC,eAAeC,QAAQ,eAAR,CAAnB;;AAEA,IAAIC,gBAAgBC,uBAAuBH,YAAvB,CAApB;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAE,WAAWA,GAAb,EAArC;AAA0D;;AAEjG,SAASL,gBAAT,CAA0BO,MAA1B,EAAkCC,SAAlC,EAA6CC,QAA7C,EAAuD;AACrD,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAIC,KAAK,IAAIT,cAAc,SAAd,CAAJ,CAA6BQ,CAA7B,CAAT;AACAF,aAASI,IAAT,CAAcN,MAAd,EAAsBK,EAAtB;AACD;;AAED,MAAIL,OAAOP,gBAAX,EAA6B;AAC3BO,WAAOP,gBAAP,CAAwBQ,SAAxB,EAAmCE,YAAnC,EAAiD,KAAjD;AACA,WAAO;AACLI,cAAQ,SAASA,MAAT,GAAkB;AACxBP,eAAOQ,mBAAP,CAA2BP,SAA3B,EAAsCE,YAAtC,EAAoD,KAApD;AACD;AAHI,KAAP;AAKD,GAPD,MAOO,IAAIH,OAAOS,WAAX,EAAwB;AAC7BT,WAAOS,WAAP,CAAmB,OAAOR,SAA1B,EAAqCE,YAArC;AACA,WAAO;AACLI,cAAQ,SAASA,MAAT,GAAkB;AACxBP,eAAOU,WAAP,CAAmB,OAAOT,SAA1B,EAAqCE,YAArC;AACD;AAHI,KAAP;AAKD;AACF;AACDQ,OAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"index.js","sourceRoot":"/Users/creator/workspace/furuida","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = addEventListener;\n\nvar _EventObject = require('./EventObject');\n\nvar _EventObject2 = _interopRequireDefault(_EventObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction addEventListener(target, eventType, callback) {\n  function wrapCallback(e) {\n    var ne = new _EventObject2[\"default\"](e);\n    callback.call(target, ne);\n  }\n\n  if (target.addEventListener) {\n    target.addEventListener(eventType, wrapCallback, false);\n    return {\n      remove: function remove() {\n        target.removeEventListener(eventType, wrapCallback, false);\n      }\n    };\n  } else if (target.attachEvent) {\n    target.attachEvent('on' + eventType, wrapCallback);\n    return {\n      remove: function remove() {\n        target.detachEvent('on' + eventType, wrapCallback);\n      }\n    };\n  }\n}\nmodule.exports = exports['default'];"]}