{"version":3,"sources":["node_modules/react-router-redux/src/actions.js"],"names":["CALL_HISTORY_METHOD","updateLocation","method","args","type","payload","push","replace","go","goBack","goForward","routerActions"],"mappings":";;;;;AAAA;;;;;AAKO,IAAMA,oDAAsB,8BAA5B;;AAEP,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,SAAO;AAAA,sCAAIC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAc;AACnBC,YAAMJ,mBADa;AAEnBK,eAAS,EAAEH,cAAF,EAAUC,UAAV;AAFU,KAAd;AAAA,GAAP;AAID;;AAED;;;;;AAKO,IAAMG,sBAAOL,eAAe,MAAf,CAAb;AACA,IAAMM,4BAAUN,eAAe,SAAf,CAAhB;AACA,IAAMO,kBAAKP,eAAe,IAAf,CAAX;AACA,IAAMQ,0BAASR,eAAe,QAAf,CAAf;AACA,IAAMS,gCAAYT,eAAe,WAAf,CAAlB;;AAEA,IAAMU,wCAAgB,EAAEL,UAAF,EAAQC,gBAAR,EAAiBC,MAAjB,EAAqBC,cAArB,EAA6BC,oBAA7B,EAAtB","file":"actions.js","sourceRoot":"/Users/creator/workspace/furuida","sourcesContent":["/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\nexport const CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD'\n\nfunction updateLocation(method) {\n  return (...args) => ({\n    type: CALL_HISTORY_METHOD,\n    payload: { method, args }\n  })\n}\n\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\nexport const push = updateLocation('push')\nexport const replace = updateLocation('replace')\nexport const go = updateLocation('go')\nexport const goBack = updateLocation('goBack')\nexport const goForward = updateLocation('goForward')\n\nexport const routerActions = { push, replace, go, goBack, goForward }\n"]}