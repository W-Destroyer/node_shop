{"version":3,"sources":["public/src/js_components/react-router/modules/computeChangedRoutes.js"],"names":["routeParamsChanged","route","prevState","nextState","path","paramNames","some","paramName","params","computeChangedRoutes","prevRoutes","routes","nextRoutes","leaveRoutes","changeRoutes","enterRoutes","parentIsLeaving","filter","isLeaving","indexOf","reverse","forEach","isNew","paramsChanged","push"],"mappings":";;;;AAAA;;AAEA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACvD,MAAI,CAACF,MAAMG,IAAX,EACE,OAAO,KAAP;;AAEF,MAAMC,aAAa,iCAAcJ,MAAMG,IAApB,CAAnB;;AAEA,SAAOC,WAAWC,IAAX,CAAgB,UAAUC,SAAV,EAAqB;AAC1C,WAAOL,UAAUM,MAAV,CAAiBD,SAAjB,MAAgCJ,UAAUK,MAAV,CAAiBD,SAAjB,CAAvC;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;;;;;;;;AAaA,SAASE,oBAAT,CAA8BP,SAA9B,EAAyCC,SAAzC,EAAoD;AAClD,MAAMO,aAAaR,aAAaA,UAAUS,MAA1C;AACA,MAAMC,aAAaT,UAAUQ,MAA7B;;AAEA,MAAIE,oBAAJ;AAAA,MAAiBC,qBAAjB;AAAA,MAA+BC,oBAA/B;AACA,MAAIL,UAAJ,EAAgB;AACd,QAAIM,kBAAkB,KAAtB;AACAH,kBAAcH,WAAWO,MAAX,CAAkB,UAAUhB,KAAV,EAAiB;AAC/C,UAAIe,eAAJ,EAAqB;AACnB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAME,YAAYN,WAAWO,OAAX,CAAmBlB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCD,mBAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,SAArC,CAAtD;AACA,YAAIe,SAAJ,EACEF,kBAAkB,IAAlB;AACF,eAAOE,SAAP;AACD;AACF,KATa,CAAd;;AAWA;AACAL,gBAAYO,OAAZ;;AAEAL,kBAAc,EAAd;AACAD,mBAAe,EAAf;;AAEAF,eAAWS,OAAX,CAAmB,UAAUpB,KAAV,EAAiB;AAClC,UAAMqB,QAAQZ,WAAWS,OAAX,CAAmBlB,KAAnB,MAA8B,CAAC,CAA7C;AACA,UAAMsB,gBAAgBV,YAAYM,OAAZ,CAAoBlB,KAApB,MAA+B,CAAC,CAAtD;;AAEA,UAAIqB,SAASC,aAAb,EACER,YAAYS,IAAZ,CAAiBvB,KAAjB,EADF,KAGEa,aAAaU,IAAb,CAAkBvB,KAAlB;AACH,KARD;AAUD,GA7BD,MA6BO;AACLY,kBAAc,EAAd;AACAC,mBAAe,EAAf;AACAC,kBAAcH,UAAd;AACD;;AAED,SAAO;AACLC,4BADK;AAELC,8BAFK;AAGLC;AAHK,GAAP;AAKD;;kBAEcN,oB","file":"computeChangedRoutes.js","sourceRoot":"/Users/creator/workspace/furuida","sourcesContent":["import { getParamNames } from './PatternUtils'\n\nfunction routeParamsChanged(route, prevState, nextState) {\n  if (!route.path)\n    return false\n\n  const paramNames = getParamNames(route.path)\n\n  return paramNames.some(function (paramName) {\n    return prevState.params[paramName] !== nextState.params[paramName]\n  })\n}\n\n/**\n * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by\n * the change from prevState to nextState. We leave routes if either\n * 1) they are not in the next state or 2) they are in the next state\n * but their params have changed (i.e. /users/123 => /users/456).\n *\n * leaveRoutes are ordered starting at the leaf route of the tree\n * we're leaving up to the common parent route. enterRoutes are ordered\n * from the top of the tree we're entering down to the leaf route.\n *\n * changeRoutes are any routes that didn't leave or enter during\n * the transition.\n */\nfunction computeChangedRoutes(prevState, nextState) {\n  const prevRoutes = prevState && prevState.routes\n  const nextRoutes = nextState.routes\n\n  let leaveRoutes, changeRoutes, enterRoutes\n  if (prevRoutes) {\n    let parentIsLeaving = false\n    leaveRoutes = prevRoutes.filter(function (route) {\n      if (parentIsLeaving) {\n        return true\n      } else {\n        const isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState)\n        if (isLeaving)\n          parentIsLeaving = true\n        return isLeaving\n      }\n    })\n\n    // onLeave hooks start at the leaf route.\n    leaveRoutes.reverse()\n\n    enterRoutes = []\n    changeRoutes = []\n\n    nextRoutes.forEach(function (route) {\n      const isNew = prevRoutes.indexOf(route) === -1\n      const paramsChanged = leaveRoutes.indexOf(route) !== -1\n\n      if (isNew || paramsChanged)\n        enterRoutes.push(route)\n      else\n        changeRoutes.push(route)\n    })\n\n  } else {\n    leaveRoutes = []\n    changeRoutes = []\n    enterRoutes = nextRoutes\n  }\n\n  return {\n    leaveRoutes,\n    changeRoutes,\n    enterRoutes\n  }\n}\n\nexport default computeChangedRoutes\n"]}