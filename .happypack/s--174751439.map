{"version":3,"sources":["node_modules/history/lib/DOMStateStorage.js"],"names":["exports","__esModule","readState","saveState","undefined","_warning","require","_warning2","_interopRequireDefault","obj","default","QuotaExceededErrors","QuotaExceededError","QUOTA_EXCEEDED_ERR","SecurityErrors","SecurityError","KeyPrefix","createKey","key","state","window","sessionStorage","process","env","NODE_ENV","removeItem","setItem","JSON","stringify","error","name","length","json","getItem","parse"],"mappings":"AAAA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,SAAR,GAAoBF,QAAQG,SAAR,GAAoBC,SAAxC;;AAEA,IAAIC,WAAWC,QAAQ,SAAR,CAAf;;AAEA,IAAIC,YAAYC,uBAAuBH,QAAvB,CAAhB;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIR,UAAX,GAAwBQ,GAAxB,GAA8B,EAAEC,SAASD,GAAX,EAArC;AAAwD;;AAE/F,IAAIE,sBAAsB;AACxBC,sBAAoB,IADI;AAExBC,sBAAoB;AAFI,CAA1B;;AAKA,IAAIC,iBAAiB;AACnBC,iBAAe;AADI,CAArB;;AAIA,IAAIC,YAAY,YAAhB;;AAEA,IAAIC,YAAY,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtC,SAAOF,YAAYE,GAAnB;AACD,CAFD;;AAIA,IAAIf,YAAYH,QAAQG,SAAR,GAAoB,SAASA,SAAT,CAAmBe,GAAnB,EAAwBC,KAAxB,EAA+B;AACjE,MAAI,CAACC,OAAOC,cAAZ,EAA4B;AAC1B;AACA;AACAC,YAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGjB,UAAUG,OAAd,EAAuB,KAAvB,EAA8B,iEAA9B,CAAxC,GAA2I,KAAK,CAAhJ;;AAEA;AACD;;AAED,MAAI;AACF,QAAIS,SAAS,IAAb,EAAmB;AACjBC,aAAOC,cAAP,CAAsBI,UAAtB,CAAiCR,UAAUC,GAAV,CAAjC;AACD,KAFD,MAEO;AACLE,aAAOC,cAAP,CAAsBK,OAAtB,CAA8BT,UAAUC,GAAV,CAA9B,EAA8CS,KAAKC,SAAL,CAAeT,KAAf,CAA9C;AACD;AACF,GAND,CAME,OAAOU,KAAP,EAAc;AACd,QAAIf,eAAee,MAAMC,IAArB,CAAJ,EAAgC;AAC9B;AACA;AACAR,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGjB,UAAUG,OAAd,EAAuB,KAAvB,EAA8B,0FAA9B,CAAxC,GAAoK,KAAK,CAAzK;;AAEA;AACD;;AAED,QAAIC,oBAAoBkB,MAAMC,IAA1B,KAAmCV,OAAOC,cAAP,CAAsBU,MAAtB,KAAiC,CAAxE,EAA2E;AACzE;AACAT,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGjB,UAAUG,OAAd,EAAuB,KAAvB,EAA8B,wFAA9B,CAAxC,GAAkK,KAAK,CAAvK;;AAEA;AACD;;AAED,UAAMmB,KAAN;AACD;AACF,CAjCD;;AAmCA,IAAI3B,YAAYF,QAAQE,SAAR,GAAoB,SAASA,SAAT,CAAmBgB,GAAnB,EAAwB;AAC1D,MAAIc,OAAO,KAAK,CAAhB;AACA,MAAI;AACFA,WAAOZ,OAAOC,cAAP,CAAsBY,OAAtB,CAA8BhB,UAAUC,GAAV,CAA9B,CAAP;AACD,GAFD,CAEE,OAAOW,KAAP,EAAc;AACd,QAAIf,eAAee,MAAMC,IAArB,CAAJ,EAAgC;AAC9B;AACA;AACAR,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGjB,UAAUG,OAAd,EAAuB,KAAvB,EAA8B,0FAA9B,CAAxC,GAAoK,KAAK,CAAzK;;AAEA,aAAON,SAAP;AACD;AACF;;AAED,MAAI4B,IAAJ,EAAU;AACR,QAAI;AACF,aAAOL,KAAKO,KAAL,CAAWF,IAAX,CAAP;AACD,KAFD,CAEE,OAAOH,KAAP,EAAc;AACd;AACD;AACF;;AAED,SAAOzB,SAAP;AACD,CAvBD","file":"DOMStateStorage.js","sourceRoot":"/Users/creator/workspace/furuida","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.readState = exports.saveState = undefined;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar QuotaExceededErrors = {\n  QuotaExceededError: true,\n  QUOTA_EXCEEDED_ERR: true\n};\n\nvar SecurityErrors = {\n  SecurityError: true\n};\n\nvar KeyPrefix = '@@History/';\n\nvar createKey = function createKey(key) {\n  return KeyPrefix + key;\n};\n\nvar saveState = exports.saveState = function saveState(key, state) {\n  if (!window.sessionStorage) {\n    // Session storage is not available or hidden.\n    // sessionStorage is undefined in Internet Explorer when served via file protocol.\n    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;\n\n    return;\n  }\n\n  try {\n    if (state == null) {\n      window.sessionStorage.removeItem(createKey(key));\n    } else {\n      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n    }\n  } catch (error) {\n    if (SecurityErrors[error.name]) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;\n\n      return;\n    }\n\n    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;\n\n      return;\n    }\n\n    throw error;\n  }\n};\n\nvar readState = exports.readState = function readState(key) {\n  var json = void 0;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (SecurityErrors[error.name]) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;\n\n      return undefined;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return undefined;\n};"]}